{"version":3,"sources":["App.js","serviceWorker.js","index.js","loading.gif"],"names":["App","useState","photos","setPhotos","pageNumber","setPageNumber","loading","setLoading","fetchPhotos","a","fetch","res","json","data","p","useEffect","loadMore","prevPageNumber","pageEnd","useRef","num","observer","IntersectionObserver","entries","isIntersecting","unobserve","current","threshold","observe","className","map","photo","index","key","src","urls","small","alt","user","first_name","last_name","total_likes","Loading","length","onClick","ref","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"sSA0EeA,MAtEf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEuBF,mBAAS,GAFhC,mBAENG,EAFM,KAEMC,EAFN,OAGiBJ,oBAAS,GAH1B,mBAGNK,EAHM,KAGGC,EAHH,KAMPC,EAAW,uCAAG,WAAMJ,GAAN,iBAAAK,EAAA,4DACC,8CADD,SAEAC,MAAM,8CAAD,OADJ,8CACI,iBAAkEN,EAAlE,iBAFL,cAEZO,EAFY,gBAGCA,EAAIC,OAHL,OAGZC,EAHY,OAKlBV,GAAU,SAAAW,GAAC,4BAAQA,GAAR,YAAcD,OACzBN,GAAW,GANO,2CAAH,sDASjBQ,qBAAU,WACRP,EAAYJ,KACZ,CAACA,IAEH,IAAMY,EAAW,WACfX,GAAc,SAAAY,GAAc,OAAIA,EAAiB,MAG7CC,EAAUC,mBACZC,EAAM,EAqBV,OAnBAL,qBAAU,WACR,GAAGT,EAAQ,CACT,IAAMe,EAAW,IAAIC,sBAAqB,SAAAC,GACrCA,EAAQ,GAAGC,iBACZJ,IACAJ,IACGI,GAAO,IACRC,EAASI,UAAUP,EAAQQ,YAI/B,CAACC,UAAW,IAEdN,EAASO,QAAQV,EAAQQ,YAI3B,CAACpB,EAAQc,IAGT,yBAAKS,UAAU,OACb,8DAEE3B,EAAO4B,KAAI,SAACC,EAAMC,GAAP,OACT,yBAAKH,UAAU,SAASI,IAAKD,GAC3B,yBAAKE,IAAKH,EAAMI,KAAKC,MAAOC,IAAI,KAChC,2BAAIN,EAAMO,KAAKC,WAAa,IAAMR,EAAMO,KAAKE,WAC7C,uCAAaT,EAAMO,KAAKG,iBAI9B,yBAAKZ,UAAU,WACb,yBAAKK,IAAKQ,IAASL,IAAI,MAGzB,4BAAKnC,EAAOyC,QAEZ,4BAAQC,QAAS5B,EAAU6B,IAAK3B,GAAhC,eCvDc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.6e43a1c7.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\nimport Loading from './loading.gif'\n\n\nfunction App() {\n  const [photos, setPhotos] = useState([])\n  const [pageNumber, setPageNumber] = useState(1)\n  const [loading, setLoading] = useState(false)\n\n\n  const fetchPhotos = async(pageNumber) =>{\n    const Access_Key = \"VaS3ud1C-0gdW1nw41FbBryaV_Q5obZ04o-3Vi2QC1E\"\n    const res = await fetch(`https://api.unsplash.com/photos/?client_id=${Access_Key}&page=${pageNumber}&per_page=10`)\n    const data = await res.json()\n    // console.log(data)\n    setPhotos(p => [...p, ...data])\n    setLoading(true)\n  }\n\n  useEffect(()=>{\n    fetchPhotos(pageNumber);\n  },[pageNumber])\n\n  const loadMore = () =>{\n    setPageNumber(prevPageNumber => prevPageNumber + 1)\n  }\n\n  const pageEnd = useRef();\n  let num = 1;\n  \n  useEffect(()=>{\n    if(loading){\n      const observer = new IntersectionObserver(entries =>{\n        if(entries[0].isIntersecting){\n          num++;\n          loadMore();\n          if(num >= 10){\n            observer.unobserve(pageEnd.current)\n          }\n        }\n\n      },{threshold: 1});\n\n      observer.observe(pageEnd.current)\n\n    }\n\n  },[loading,num])\n\n  return (\n    <div className=\"App\">\n      <h1>Infinite scrolling react hooks</h1>\n      {\n        photos.map((photo,index) =>(\n          <div className=\"photos\" key={index}>\n            <img src={photo.urls.small} alt=\"\"/>\n            <p>{photo.user.first_name + ' ' + photo.user.last_name}</p>\n            <span>Like: {photo.user.total_likes}</span>\n          </div>\n        ))\n      }\n      <div className=\"loading\">\n        <img src={Loading} alt=\"\"/>\n      </div>\n\n      <h3>{photos.length}</h3>\n\n      <button onClick={loadMore} ref={pageEnd}>\n        Load More\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/loading.35b947f5.gif\";"],"sourceRoot":""}